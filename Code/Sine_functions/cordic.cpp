#include "Headers/cordic.h"
#include <cmath>
#include "../Utilities/Headers/basic_math.h"
#include "../Utilities/Headers/sine_helper.h"//range reduction helper

double angles[15] = {
    0.78539816339744827899949086713604629039764404296875,
    0.46364760900080609351547877849952783435583114624023,
    0.24497866312686414347332686247682431712746620178223,
    0.12435499454676143815667899161780951544642448425293,
    0.06241880999595735002305474381500971503555774688721,
    0.03123983343026827744215445648023887770250439643860,
    0.01562372862047683129416153491320073953829705715179,
    0.00781234106010111114398730691732453124132007360458,
    0.00390623013196697175739013907502794609172269701958,
    0.00195312251647881875843415500071387214120477437973,
    0.00097656218955931945943649274965991935459896922112,
    0.00048828121119489828992621394121442790492437779903,
    0.00024414062014936177124474481203719733457546681166,
    0.00012207031189367020785306594543584424172877334058,
    0.00006103515617420877259350145416227917394280666485,
};

double cordic_sine(double angle)
{
    //range reduction
    const double reduced_angle = reduce_angle(angle);
    const int func_sign = sine_sign(angle);

    // Constants for CORDIC calculations
    constexpr double K = 0.607252935385914;
    constexpr int iterations = 15;

    double x = 1.0, y = 0.0, z = reduced_angle;

    for (int i = 0; i < iterations; ++i) {
        
        //choose direction
        int direction = Sign(z);

        //rotate vector
        double new_x = x - direction * y * std::pow(2, -i);
        double new_y = y + direction * x * std::pow(2, -i);

        x = new_x;
        y = new_y;
        z -= direction * angles[i];
    }

    return y * K * func_sign;
}